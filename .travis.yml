language: rust
sudo: false

cache: cargo

matrix:
  include:
  # Builds on nightly.
  - os: linux
    rust: nightly
    env: RUST_BACKTRACE=1
    before_install:
      - sudo apt-get install python python-pip
      - sudo pip install awscli
    install:
      - cargo install wasm-pack --force #todo improve this, it's very slow
    before_script:
      - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - wasm-pack build && cd www && cp -r ../pkg/ . && npm install && cd ../
    script:
      - cargo check
      - cargo check --target wasm32-unknown-unknown
      - cargo check                                 --no-default-features
      - cargo check --target wasm32-unknown-unknown --no-default-features
      - cargo check                                 --no-default-features --features console_error_panic_hook
      - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
      - cargo check                                 --no-default-features --features "console_error_panic_hook wee_alloc"
      - cargo check --target wasm32-unknown-unknown --no-default-features --features "console_error_panic_hook wee_alloc"
      - export CARGO_INCREMENTAL=0
      - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
      - cargo build --verbose $CARGO_OPTIONS
      - cargo test --verbose $CARGO_OPTIONS
      - |
        zip -0 ccov.zip `find . \( -name "big_primes*.gc*" \) -print`;
        ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" -o lcov.info;
        bash <(curl -s https://codecov.io/bash) -f lcov.info;
    after_success:
      - |
        if([ $TRAVIS_BRANCH == "master" ] && [ $TRAVIS_PULL_REQUEST == "false" ])
        then
          cd www && npm run-script build && cd ../
          #TODO: This is not an atomic deploy!
          sudo aws s3 rm s3://bigprimes/* --recursive
          sudo aws s3 cp www/dist/. s3://bigprimes/ --exclude "*" --include "*.wasm" --content-type application/wasm --acl public-read && echo 'S3 wasm sync complete.'
          sudo aws s3 cp www/dist/. s3://bigprimes/ --exclude "*" --include "*.html" --include "*.js" && echo 'S3 index+js sync complete.'
          sudo aws s3 cp www/       s3://bigprimes/ --exclude "*" --include "*.css" && echo 'S3 css sync complete.'
          #TODO: create and copy a favicon, currently cloudfront will serve the index.html as favicon!
          sudo aws cloudfront create-invalidation --distribution-id $AWS_CF_DISTRIBUTION_ID --paths "/*" && echo 'CloudFront cache invalidated.'
        fi
  # Builds on beta.
  - os: linux
    rust: beta
    env: RUST_BACKTRACE=1
    install:
      - cargo install wasm-pack --force #todo improve this, it's very slow
    before_script:
      - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - wasm-pack build && cd www && npm install
    script:
      - cargo check
      - cargo check --target wasm32-unknown-unknown
      - cargo check                                 --no-default-features
      - cargo check --target wasm32-unknown-unknown --no-default-features
      - cargo check                                 --no-default-features --features console_error_panic_hook
      - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
      # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
      - cargo build
      - cargo test
  # Builds on stable.
  - os: linux
    rust: stable
    env: RUST_BACKTRACE=1
    install:
      - cargo install wasm-pack --force #todo improve this, it's very slow
    before_script:
      - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - wasm-pack build && cd www && npm install
    script:
      - cargo check
      - cargo check --target wasm32-unknown-unknown
      - cargo check                                 --no-default-features
      - cargo check --target wasm32-unknown-unknown --no-default-features
      - cargo check                                 --no-default-features --features console_error_panic_hook
      - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
      # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
      - cargo build
      - cargo test

notifications:
  email: false
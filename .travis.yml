language: rust

cache:
  cargo: true
  pip: true

env: RUST_BACKTRACE=1

os: linux

stages:
  - name: Tests
    if: type = pull_request
  - name: CodeCov
  - name: Deploy
    # require the branch name to be master (note for PRs this is the base branch name)
    if: branch = master and type != pull_request

jobs:
  include:
    - stage: Tests
    # Builds on nightly.
      rust: nightly
      install:
        # If caching is working then this binary will already be installed, and this throws an error
        # We prevent the error from stopping travisci via || true
        - cargo install wasm-pack || true
      before_script:
        - wasm-pack build
        - cd www && cp -r ../pkg/ . && npm install && cd ../
      before_cache:
        # this following line is recommended by travis docs if one overrides before_cache
        - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
        # for builds using rust nightly, we may aswell not attempt to cache target directory
        # as every night, this cache is no longer useful
        - rm -rfv $TRAVIS_BUILD_DIR/target/
        - cargo clean -p big_primes
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        - cargo check                                 --no-default-features --features "console_error_panic_hook wee_alloc"
        - cargo check --target wasm32-unknown-unknown --no-default-features --features "console_error_panic_hook wee_alloc"
        - cargo build
        - cargo test
    # Builds on beta.
    - 
      rust: beta
      install:
        # If caching is working then this binary will already be installed, and this throws an error
        # We prevent the error from stopping travisci via || true
        - cargo install wasm-pack || true
      before_script:
        - wasm-pack build && cd www && npm install
      before_cache:
        # this following line is recommended by travis docs if one overrides before_cache
        - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
        #todo: check if each of these lines is actually needed: https://gist.github.com/jkcclemens/000456ca646bd502cac0dbddcb8fa307
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/incremental/{big_primes,build_script_build}-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/.fingerprint/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/build/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/libbig_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/{big_primes,libbig_primes}.d
        - cargo clean -p big_primes
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
        - cargo build
        - cargo test
    # Builds on stable.
    -
      rust: stable
      install:
        # If caching is working then this binary will already be installed, and this throws an error
        # We prevent the error from stopping travisci via || true
        - cargo install wasm-pack || true
      before_script:
        - wasm-pack build && cd www && npm install
      before_cache:
        # this following line is recommended by travis docs if one overrides before_cache
        - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
        #todo: check if each of these lines is actually needed: https://gist.github.com/jkcclemens/000456ca646bd502cac0dbddcb8fa307
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/incremental/{big_primes,build_script_build}-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/.fingerprint/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/build/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/libbig_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/{big_primes,libbig_primes}.d
        - cargo clean -p big_primes
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
        - cargo build
        - cargo test
    - stage: CodeCov
      rust: nightly
      install:
        # If caching is working then this binary will already be installed, and this throws an error
        # We prevent the error from stopping travisci via || true
        - cargo install wasm-pack || true
      before_cache:
        # this following line is recommended by travis docs if one overrides before_cache
        - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
        #todo: check if each of these lines is actually needed: https://gist.github.com/jkcclemens/000456ca646bd502cac0dbddcb8fa307
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/incremental/{big_primes,build_script_build}-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/.fingerprint/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/build/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/libbig_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/deps/big_primes-*
        - rm -rfv $TRAVIS_BUILD_DIR/target/debug/{big_primes,libbig_primes}.d
        - cargo clean -p big_primes
      before_script:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      script:
        - export CARGO_INCREMENTAL=0
        - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
        - cargo build --verbose $CARGO_OPTIONS
        - cargo test --verbose $CARGO_OPTIONS
        - |
          zip -0 ccov.zip `find . \( -name "big_primes*.gc*" \) -print`;
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" -o lcov.info;
          bash <(curl -s https://codecov.io/bash) -f lcov.info;
    
    - stage: Deploy
      rust: nightly
      before_install:
        #todo: Can these package installs be cached?
        - sudo apt-get install python python-pip
        - sudo -H pip install awscli
      install:
        # If caching is working then this binary will already be installed, and this throws an error
        # We prevent the error from stopping travisci via || true
        - cargo install wasm-pack || true
        # binaryen is used to optimize wasm files for a ~20% size reduction and some extra speed
        - |
          BINARYENVERSION=$(curl --silent "https://api.github.com/repos/WebAssembly/binaryen/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
          wget https://github.com/WebAssembly/binaryen/releases/download/$BINARYENVERSION/binaryen-$BINARYENVERSION-aarch64-linux.tar.gz
          tar -zxvf binaryen-$BINARYENVERSION-aarch64-linux.tar.gz binaryen-$BINARYENVERSION/wasm-opt
          mv binaryen-$BINARYENVERSION/wasm-opt wasm-opt
      before_script:
        - wasm-pack build
        - #optimize wasm file
        - ./wasm-opt pkg/big_primes_bg.wasm -O4 -o pkg/big_primes_bg.wasm
        - cd www && cp -r ../pkg/ . && npm install && cd ../
      before_cache:
        # this following line is recommended by travis docs if one overrides before_cache
        - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
        # for builds using rust nightly, we may aswell not attempt to cache target directory
        # as every night, this cache is no longer useful
        - rm -rfv $TRAVIS_BUILD_DIR/target/
        - cargo clean -p big_primes
        # wipe out the old www files or we end up with loads of wasm files in the cache
        - rm -rfv $TRAVIS_BUILD_DIR/www/dist/*
      script:
        - |
          cargo build
          if([ $TRAVIS_BRANCH == "master" ] && [ $TRAVIS_PULL_REQUEST == "false" ])
          then
            cd www && npm run-script build && cd ../
            #compress wasm with gzip
            find www/dist -type f -name "*.wasm" -exec gzip -9 {} \; -exec mv {}.gz {} \;
            #TODO: This is not an atomic deploy!
            aws s3 rm s3://bigprimes/* --recursive
            aws s3 cp www/dist/*.wasm         s3://bigprimes/ --content-type application/wasm --content-encoding gzip --acl public-read && echo 'S3 wasm sync complete.'
            aws s3 cp www/dist/*.html         s3://bigprimes/ && echo 'S3 html sync complete.'
            aws s3 cp www/dist/bootstrap.js   s3://bigprimes/
            aws s3 cp www/dist/0.bootstrap.js s3://bigprimes/ && echo 'S3 js sync complete.'
            aws s3 cp www/*.css               s3://bigprimes/ && echo 'S3 css sync complete.'
            aws s3 cp www/favicon.ico         s3://bigprimes/ && echo 'S3 favicon sync complete.'
            aws s3 cp www/robots.txt          s3://bigprimes/ && echo 'S3 robots.txt sync complete.'
            aws cloudfront create-invalidation --distribution-id $AWS_CF_DISTRIBUTION_ID --paths "/*" && echo 'CloudFront cache invalidated.'
          fi

notifications:
  email: false

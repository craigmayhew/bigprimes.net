language: rust

cache: cargo

jobs:
  include:
    - stage: Tests
      if: NOT branch = master
      if: type = pull_request
    # Builds on nightly.
    - os: linux
      rust: nightly
      env: RUST_BACKTRACE=1
      install:
        - cargo install wasm-pack
      before_script:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
        - wasm-pack build && cd www && cp -r ../pkg/ . && npm install && cd ../
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        - cargo check                                 --no-default-features --features "console_error_panic_hook wee_alloc"
        - cargo check --target wasm32-unknown-unknown --no-default-features --features "console_error_panic_hook wee_alloc"
        - cargo build
        - cargo test
    # Builds on beta.
    - os: linux
      rust: beta
      env: RUST_BACKTRACE=1
      install:
        - cargo install wasm-pack
      before_script:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
        - wasm-pack build && cd www && npm install
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
        - cargo build
        - cargo test
    # Builds on stable.
    - os: linux
      rust: stable
      env: RUST_BACKTRACE=1
      install:
        - cargo install wasm-pack
      before_script:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
        - wasm-pack build && cd www && npm install
      before_cache:
        #todo: added this to compare build times to beta
        #todo: check if each of these lines is actually needed: https://gist.github.com/jkcclemens/000456ca646bd502cac0dbddcb8fa307
        - rm -rfv target/debug/incremental/{big_primes,build_script_build}-*
        - rm -rfv target/debug/.fingerprint/big_primes-*
        - rm -rfv target/debug/build/big_primes-*
        - rm -rfv target/debug/deps/libbig_primes-*
        - rm -rfv target/debug/deps/big_primes-*
        - rm -rfv target/debug/{big_primes,libbig_primes}.d
        - cargo clean -p big_primes
      script:
        - cargo check
        - cargo check --target wasm32-unknown-unknown
        - cargo check                                 --no-default-features
        - cargo check --target wasm32-unknown-unknown --no-default-features
        - cargo check                                 --no-default-features --features console_error_panic_hook
        - cargo check --target wasm32-unknown-unknown --no-default-features --features console_error_panic_hook
        # Note: no enabling the `wee_alloc` feature here because it requires nightly for now.
        - cargo build
        - cargo test
    
    - stage: Deploy
      if: branch = master
      if: NOT type = pull_request
    - os: linux
      rust: nightly
      env: RUST_BACKTRACE=1
      before_install:
        #todo: Can these package installs be cached?
        - sudo apt-get install python python-pip
        - sudo pip install awscli
      install:
        - cargo install wasm-pack
      before_script:
        - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
        - wasm-pack build && cd www && cp -r ../pkg/ . && npm install && cd ../
      script:
        - export CARGO_INCREMENTAL=0
        - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
        - cargo build --verbose $CARGO_OPTIONS
        - cargo test --verbose $CARGO_OPTIONS
        - |
          zip -0 ccov.zip `find . \( -name "big_primes*.gc*" \) -print`;
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" -o lcov.info;
          bash <(curl -s https://codecov.io/bash) -f lcov.info;
      after_success:
        - |
          if([ $TRAVIS_BRANCH == "master" ] && [ $TRAVIS_PULL_REQUEST == "false" ])
          then
            cd www && npm run-script build && cd ../
            #TODO: This is not an atomic deploy!
            aws s3 rm s3://bigprimes/* --recursive
            aws s3 cp www/dist/*.wasm         s3://bigprimes/ --content-type application/wasm --acl public-read && echo 'S3 wasm sync complete.'
            aws s3 cp www/dist/*.html         s3://bigprimes/ && echo 'S3 html sync complete.'
            aws s3 cp www/dist/bootstrap.js   s3://bigprimes/
            aws s3 cp www/dist/0.bootstrap.js s3://bigprimes/ && echo 'S3 js sync complete.'
            aws s3 cp www/*.css               s3://bigprimes/ && echo 'S3 css sync complete.'
            aws s3 cp www/favicon.ico         s3://bigprimes/ && echo 'S3 favicon sync complete.'
            #TODO: create and copy a favicon, currently cloudfront will serve the index.html as favicon!
            aws cloudfront create-invalidation --distribution-id $AWS_CF_DISTRIBUTION_ID --paths "/*" && echo 'CloudFront cache invalidated.'
          fi

notifications:
  email: false